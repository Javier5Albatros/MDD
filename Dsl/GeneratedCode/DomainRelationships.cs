//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace UPM_IPS.MPJAAMPrototool
{
	/// <summary>
	/// DomainRelationship TapizPrototoolHasVentanaPrincipal
	/// Description for UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5e0ffb4c-847d-4fa2-999b-467d8572cf7b")]
	public partial class TapizPrototoolHasVentanaPrincipal : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizPrototoolHasVentanaPrincipal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5e0ffb4c, 0x847d, 0x4fa2, 0x99, 0x9b, 0x46, 0x7d, 0x85, 0x72, 0xcf, 0x7b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizPrototoolHasVentanaPrincipal link in the same Partition as the given TapizPrototool
		/// </summary>
		/// <param name="source">TapizPrototool to use as the source of the relationship.</param>
		/// <param name="target">VentanaPrincipal to use as the target of the relationship.</param>
		public TapizPrototoolHasVentanaPrincipal(TapizPrototool source, VentanaPrincipal target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizPrototoolHasVentanaPrincipal.TapizPrototoolDomainRoleId, source), new DslModeling::RoleAssignment(TapizPrototoolHasVentanaPrincipal.VentanaPrincipalDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizPrototoolHasVentanaPrincipal(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizPrototoolHasVentanaPrincipal(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizPrototoolHasVentanaPrincipal(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizPrototoolHasVentanaPrincipal(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TapizPrototool domain role code
		
		/// <summary>
		/// TapizPrototool domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizPrototoolDomainRoleId = new global::System.Guid(0x07dc0c16, 0x0f98, 0x4d58, 0x93, 0x71, 0xd9, 0xcb, 0x7c, 0xd0, 0x12, 0x41);
		
		/// <summary>
		/// DomainRole TapizPrototool
		/// Description for
		/// UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal.TapizPrototool
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal/TapizPrototool.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal/TapizPrototool.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "VentanaPrincipal", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal/TapizPrototool.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("07dc0c16-0f98-4d58-9371-d9cb7cd01241")]
		public virtual TapizPrototool TapizPrototool
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TapizPrototool)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizPrototoolDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizPrototoolDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TapizPrototool of a VentanaPrincipal
		/// <summary>
		/// Gets TapizPrototool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TapizPrototool GetTapizPrototool(VentanaPrincipal element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, VentanaPrincipalDomainRoleId) as TapizPrototool;
		}
		
		/// <summary>
		/// Sets TapizPrototool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapizPrototool(VentanaPrincipal element, TapizPrototool newTapizPrototool)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, VentanaPrincipalDomainRoleId, newTapizPrototool);
		}
		#endregion
		#region VentanaPrincipal domain role code
		
		/// <summary>
		/// VentanaPrincipal domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaPrincipalDomainRoleId = new global::System.Guid(0x8cddf1f0, 0xf7bb, 0x4788, 0x87, 0x81, 0x6f, 0x13, 0xad, 0xf4, 0x72, 0x8f);
		
		/// <summary>
		/// DomainRole VentanaPrincipal
		/// Description for
		/// UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal.VentanaPrincipal
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal/VentanaPrincipal.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal/VentanaPrincipal.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TapizPrototool", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal/VentanaPrincipal.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8cddf1f0-f7bb-4788-8781-6f13adf4728f")]
		public virtual VentanaPrincipal VentanaPrincipal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (VentanaPrincipal)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaPrincipalDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaPrincipalDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VentanaPrincipal of a TapizPrototool
		/// <summary>
		/// Gets VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static VentanaPrincipal GetVentanaPrincipal(TapizPrototool element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TapizPrototoolDomainRoleId) as VentanaPrincipal;
		}
		
		/// <summary>
		/// Sets VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetVentanaPrincipal(TapizPrototool element, VentanaPrincipal newVentanaPrincipal)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TapizPrototoolDomainRoleId, newVentanaPrincipal);
		}
		#endregion
		#region TapizPrototool link accessor
		/// <summary>
		/// Get the TapizPrototoolHasVentanaPrincipal link to a TapizPrototool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal GetLinkToVentanaPrincipal (global::UPM_IPS.MPJAAMPrototool.TapizPrototool tapizPrototoolInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal>(tapizPrototoolInstance, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal.TapizPrototoolDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TapizPrototool not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region VentanaPrincipal link accessor
		/// <summary>
		/// Get the TapizPrototoolHasVentanaPrincipal link to a VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal GetLinkToTapizPrototool (global::UPM_IPS.MPJAAMPrototool.VentanaPrincipal ventanaPrincipalInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal>(ventanaPrincipalInstance, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal.VentanaPrincipalDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of VentanaPrincipal not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizPrototoolHasVentanaPrincipal instance accessors
		
		/// <summary>
		/// Get any TapizPrototoolHasVentanaPrincipal links between a given TapizPrototool and a VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal> GetLinks( global::UPM_IPS.MPJAAMPrototool.TapizPrototool source, global::UPM_IPS.MPJAAMPrototool.VentanaPrincipal target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal>();
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal>(source, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal.TapizPrototoolDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal link in links )
			{
				if ( target.Equals(link.VentanaPrincipal) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizPrototoolHasVentanaPrincipal link between a given TapizPrototooland a VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal GetLink( global::UPM_IPS.MPJAAMPrototool.TapizPrototool source, global::UPM_IPS.MPJAAMPrototool.VentanaPrincipal target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal>(source, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal.TapizPrototoolDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaPrincipal link in links )
			{
				if ( target.Equals(link.VentanaPrincipal) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.MPJAAMPrototool
{
	/// <summary>
	/// DomainRelationship TapizPrototoolHasVentanaSecundarium
	/// Description for UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2087e3fb-77d1-46a2-814e-c7e0d98e91c7")]
	public partial class TapizPrototoolHasVentanaSecundarium : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizPrototoolHasVentanaSecundarium domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2087e3fb, 0x77d1, 0x46a2, 0x81, 0x4e, 0xc7, 0xe0, 0xd9, 0x8e, 0x91, 0xc7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizPrototoolHasVentanaSecundarium link in the same Partition as the given TapizPrototool
		/// </summary>
		/// <param name="source">TapizPrototool to use as the source of the relationship.</param>
		/// <param name="target">VentanaSecundaria to use as the target of the relationship.</param>
		public TapizPrototoolHasVentanaSecundarium(TapizPrototool source, VentanaSecundaria target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizPrototoolHasVentanaSecundarium.TapizPrototoolDomainRoleId, source), new DslModeling::RoleAssignment(TapizPrototoolHasVentanaSecundarium.VentanaSecundariaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizPrototoolHasVentanaSecundarium(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizPrototoolHasVentanaSecundarium(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizPrototoolHasVentanaSecundarium(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizPrototoolHasVentanaSecundarium(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TapizPrototool domain role code
		
		/// <summary>
		/// TapizPrototool domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizPrototoolDomainRoleId = new global::System.Guid(0x423162ad, 0xba77, 0x4cc2, 0xb0, 0x93, 0x58, 0xe4, 0x02, 0x74, 0x25, 0x31);
		
		/// <summary>
		/// DomainRole TapizPrototool
		/// Description for
		/// UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium.TapizPrototool
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium/TapizPrototool.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium/TapizPrototool.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "VentanaSecundarium", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium/TapizPrototool.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("423162ad-ba77-4cc2-b093-58e402742531")]
		public virtual TapizPrototool TapizPrototool
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TapizPrototool)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizPrototoolDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizPrototoolDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TapizPrototool of a VentanaSecundaria
		/// <summary>
		/// Gets TapizPrototool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TapizPrototool GetTapizPrototool(VentanaSecundaria element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, VentanaSecundariaDomainRoleId) as TapizPrototool;
		}
		
		/// <summary>
		/// Sets TapizPrototool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapizPrototool(VentanaSecundaria element, TapizPrototool newTapizPrototool)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, VentanaSecundariaDomainRoleId, newTapizPrototool);
		}
		#endregion
		#region VentanaSecundaria domain role code
		
		/// <summary>
		/// VentanaSecundaria domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaSecundariaDomainRoleId = new global::System.Guid(0xbc4b6a58, 0xb595, 0x49f7, 0xb5, 0x4d, 0x6c, 0xa6, 0x14, 0x27, 0x3f, 0xd4);
		
		/// <summary>
		/// DomainRole VentanaSecundaria
		/// Description for
		/// UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium.VentanaSecundaria
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium/VentanaSecundaria.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium/VentanaSecundaria.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TapizPrototool", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium/VentanaSecundaria.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bc4b6a58-b595-49f7-b54d-6ca614273fd4")]
		public virtual VentanaSecundaria VentanaSecundaria
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (VentanaSecundaria)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaSecundariaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaSecundariaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VentanaSecundarium of a TapizPrototool
		/// <summary>
		/// Gets a list of VentanaSecundarium.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<VentanaSecundaria> GetVentanaSecundarium(TapizPrototool element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<VentanaSecundaria>, VentanaSecundaria>(element, TapizPrototoolDomainRoleId);
		}
		#endregion
		#region TapizPrototool link accessor
		/// <summary>
		/// Get the list of TapizPrototoolHasVentanaSecundarium links to a TapizPrototool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium> GetLinksToVentanaSecundarium ( global::UPM_IPS.MPJAAMPrototool.TapizPrototool tapizPrototoolInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium>(tapizPrototoolInstance, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium.TapizPrototoolDomainRoleId);
		}
		#endregion
		#region VentanaSecundaria link accessor
		/// <summary>
		/// Get the TapizPrototoolHasVentanaSecundarium link to a VentanaSecundaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium GetLinkToTapizPrototool (global::UPM_IPS.MPJAAMPrototool.VentanaSecundaria ventanaSecundariaInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium>(ventanaSecundariaInstance, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium.VentanaSecundariaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of VentanaSecundaria not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizPrototoolHasVentanaSecundarium instance accessors
		
		/// <summary>
		/// Get any TapizPrototoolHasVentanaSecundarium links between a given TapizPrototool and a VentanaSecundaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium> GetLinks( global::UPM_IPS.MPJAAMPrototool.TapizPrototool source, global::UPM_IPS.MPJAAMPrototool.VentanaSecundaria target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium>();
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium>(source, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium.TapizPrototoolDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium link in links )
			{
				if ( target.Equals(link.VentanaSecundaria) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizPrototoolHasVentanaSecundarium link between a given TapizPrototooland a VentanaSecundaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium GetLink( global::UPM_IPS.MPJAAMPrototool.TapizPrototool source, global::UPM_IPS.MPJAAMPrototool.VentanaSecundaria target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium>(source, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium.TapizPrototoolDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanaSecundarium link in links )
			{
				if ( target.Equals(link.VentanaSecundaria) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.MPJAAMPrototool
{
	/// <summary>
	/// DomainRelationship VentanaHasMenus
	/// Description for UPM_IPS.MPJAAMPrototool.VentanaHasMenus
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.VentanaHasMenus.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.VentanaHasMenus.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6f24ba14-83df-4673-8d8b-dc3f94fd34c5")]
	public partial class VentanaHasMenus : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// VentanaHasMenus domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6f24ba14, 0x83df, 0x4673, 0x8d, 0x8b, 0xdc, 0x3f, 0x94, 0xfd, 0x34, 0xc5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a VentanaHasMenus link in the same Partition as the given Ventana
		/// </summary>
		/// <param name="source">Ventana to use as the source of the relationship.</param>
		/// <param name="target">Menu to use as the target of the relationship.</param>
		public VentanaHasMenus(Ventana source, Menu target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(VentanaHasMenus.VentanaDomainRoleId, source), new DslModeling::RoleAssignment(VentanaHasMenus.MenuDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaHasMenus(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaHasMenus(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaHasMenus(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaHasMenus(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Ventana domain role code
		
		/// <summary>
		/// Ventana domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaDomainRoleId = new global::System.Guid(0x98c1b9d7, 0x41ab, 0x4ab6, 0x9c, 0x3b, 0x44, 0x6c, 0x8a, 0xf5, 0xa0, 0x3a);
		
		/// <summary>
		/// DomainRole Ventana
		/// Description for UPM_IPS.MPJAAMPrototool.VentanaHasMenus.Ventana
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.VentanaHasMenus/Ventana.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.VentanaHasMenus/Ventana.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Menus", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.VentanaHasMenus/Ventana.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("98c1b9d7-41ab-4ab6-9c3b-446c8af5a03a")]
		public virtual Ventana Ventana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Ventana)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ventana of a Menu
		/// <summary>
		/// Gets Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Ventana GetVentana(Menu element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MenuDomainRoleId) as Ventana;
		}
		
		/// <summary>
		/// Sets Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetVentana(Menu element, Ventana newVentana)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MenuDomainRoleId, newVentana);
		}
		#endregion
		#region Menu domain role code
		
		/// <summary>
		/// Menu domain role Id.
		/// </summary>
		public static readonly global::System.Guid MenuDomainRoleId = new global::System.Guid(0x05d3a0e7, 0x475e, 0x4a96, 0x8f, 0x40, 0xce, 0x75, 0xde, 0xda, 0xa9, 0xce);
		
		/// <summary>
		/// DomainRole Menu
		/// Description for UPM_IPS.MPJAAMPrototool.VentanaHasMenus.Menu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.VentanaHasMenus/Menu.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.VentanaHasMenus/Menu.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Ventana", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.VentanaHasMenus/Menu.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("05d3a0e7-475e-4a96-8f40-ce75dedaa9ce")]
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Menu)DslModeling::DomainRoleInfo.GetRolePlayer(this, MenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Menus of a Ventana
		/// <summary>
		/// Gets a list of Menus.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Menu> GetMenus(Ventana element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Menu>, Menu>(element, VentanaDomainRoleId);
		}
		#endregion
		#region Ventana link accessor
		/// <summary>
		/// Get the list of VentanaHasMenus links to a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus> GetLinksToMenus ( global::UPM_IPS.MPJAAMPrototool.Ventana ventanaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus>(ventanaInstance, global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus.VentanaDomainRoleId);
		}
		#endregion
		#region Menu link accessor
		/// <summary>
		/// Get the VentanaHasMenus link to a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus GetLinkToVentana (global::UPM_IPS.MPJAAMPrototool.Menu menuInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus>(menuInstance, global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus.MenuDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Menu not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region VentanaHasMenus instance accessors
		
		/// <summary>
		/// Get any VentanaHasMenus links between a given Ventana and a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus> GetLinks( global::UPM_IPS.MPJAAMPrototool.Ventana source, global::UPM_IPS.MPJAAMPrototool.Menu target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus>();
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus>(source, global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus.VentanaDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus link in links )
			{
				if ( target.Equals(link.Menu) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one VentanaHasMenus link between a given Ventanaand a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus GetLink( global::UPM_IPS.MPJAAMPrototool.Ventana source, global::UPM_IPS.MPJAAMPrototool.Menu target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus>(source, global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus.VentanaDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.VentanaHasMenus link in links )
			{
				if ( target.Equals(link.Menu) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.MPJAAMPrototool
{
	/// <summary>
	/// DomainRelationship MenuHasItemMenus
	/// Description for UPM_IPS.MPJAAMPrototool.MenuHasItemMenus
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.MenuHasItemMenus.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.MenuHasItemMenus.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d5ee51ae-785d-4b0f-a772-f2b360d2afd5")]
	public partial class MenuHasItemMenus : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MenuHasItemMenus domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd5ee51ae, 0x785d, 0x4b0f, 0xa7, 0x72, 0xf2, 0xb3, 0x60, 0xd2, 0xaf, 0xd5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MenuHasItemMenus link in the same Partition as the given Menu
		/// </summary>
		/// <param name="source">Menu to use as the source of the relationship.</param>
		/// <param name="target">ItemMenu to use as the target of the relationship.</param>
		public MenuHasItemMenus(Menu source, ItemMenu target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MenuHasItemMenus.MenuDomainRoleId, source), new DslModeling::RoleAssignment(MenuHasItemMenus.ItemMenuDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MenuHasItemMenus(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MenuHasItemMenus(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MenuHasItemMenus(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MenuHasItemMenus(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Menu domain role code
		
		/// <summary>
		/// Menu domain role Id.
		/// </summary>
		public static readonly global::System.Guid MenuDomainRoleId = new global::System.Guid(0x50a0de01, 0x3aa9, 0x48c0, 0x8a, 0x04, 0xa4, 0xe3, 0xbe, 0x50, 0x0d, 0x69);
		
		/// <summary>
		/// DomainRole Menu
		/// Description for UPM_IPS.MPJAAMPrototool.MenuHasItemMenus.Menu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.MenuHasItemMenus/Menu.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.MenuHasItemMenus/Menu.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ItemMenus", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.MenuHasItemMenus/Menu.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("50a0de01-3aa9-48c0-8a04-a4e3be500d69")]
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Menu)DslModeling::DomainRoleInfo.GetRolePlayer(this, MenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Menu of a ItemMenu
		/// <summary>
		/// Gets Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Menu GetMenu(ItemMenu element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ItemMenuDomainRoleId) as Menu;
		}
		
		/// <summary>
		/// Sets Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMenu(ItemMenu element, Menu newMenu)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ItemMenuDomainRoleId, newMenu);
		}
		#endregion
		#region ItemMenu domain role code
		
		/// <summary>
		/// ItemMenu domain role Id.
		/// </summary>
		public static readonly global::System.Guid ItemMenuDomainRoleId = new global::System.Guid(0x7bb3094a, 0xde3a, 0x46f8, 0x96, 0xc1, 0x15, 0x5d, 0x1a, 0x05, 0xb1, 0x06);
		
		/// <summary>
		/// DomainRole ItemMenu
		/// Description for UPM_IPS.MPJAAMPrototool.MenuHasItemMenus.ItemMenu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.MenuHasItemMenus/ItemMenu.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.MenuHasItemMenus/ItemMenu.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Menu", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.MenuHasItemMenus/ItemMenu.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7bb3094a-de3a-46f8-96c1-155d1a05b106")]
		public virtual ItemMenu ItemMenu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ItemMenu)DslModeling::DomainRoleInfo.GetRolePlayer(this, ItemMenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ItemMenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ItemMenus of a Menu
		/// <summary>
		/// Gets a list of ItemMenus.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ItemMenu> GetItemMenus(Menu element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ItemMenu>, ItemMenu>(element, MenuDomainRoleId);
		}
		#endregion
		#region Menu link accessor
		/// <summary>
		/// Get the list of MenuHasItemMenus links to a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus> GetLinksToItemMenus ( global::UPM_IPS.MPJAAMPrototool.Menu menuInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus>(menuInstance, global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus.MenuDomainRoleId);
		}
		#endregion
		#region ItemMenu link accessor
		/// <summary>
		/// Get the MenuHasItemMenus link to a ItemMenu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus GetLinkToMenu (global::UPM_IPS.MPJAAMPrototool.ItemMenu itemMenuInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus>(itemMenuInstance, global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus.ItemMenuDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ItemMenu not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MenuHasItemMenus instance accessors
		
		/// <summary>
		/// Get any MenuHasItemMenus links between a given Menu and a ItemMenu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus> GetLinks( global::UPM_IPS.MPJAAMPrototool.Menu source, global::UPM_IPS.MPJAAMPrototool.ItemMenu target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus>();
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus>(source, global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus.MenuDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus link in links )
			{
				if ( target.Equals(link.ItemMenu) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MenuHasItemMenus link between a given Menuand a ItemMenu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus GetLink( global::UPM_IPS.MPJAAMPrototool.Menu source, global::UPM_IPS.MPJAAMPrototool.ItemMenu target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus>(source, global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus.MenuDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.MenuHasItemMenus link in links )
			{
				if ( target.Equals(link.ItemMenu) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.MPJAAMPrototool
{
	/// <summary>
	/// DomainRelationship VentanaHasBotons
	/// Description for UPM_IPS.MPJAAMPrototool.VentanaHasBotons
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.VentanaHasBotons.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.VentanaHasBotons.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("476b31df-9132-47e9-8534-b405a98551fa")]
	public partial class VentanaHasBotons : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// VentanaHasBotons domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x476b31df, 0x9132, 0x47e9, 0x85, 0x34, 0xb4, 0x05, 0xa9, 0x85, 0x51, 0xfa);
	
				
		/// <summary>
		/// Constructor
		/// Creates a VentanaHasBotons link in the same Partition as the given Ventana
		/// </summary>
		/// <param name="source">Ventana to use as the source of the relationship.</param>
		/// <param name="target">Boton to use as the target of the relationship.</param>
		public VentanaHasBotons(Ventana source, Boton target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(VentanaHasBotons.VentanaDomainRoleId, source), new DslModeling::RoleAssignment(VentanaHasBotons.BotonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaHasBotons(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaHasBotons(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaHasBotons(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaHasBotons(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Ventana domain role code
		
		/// <summary>
		/// Ventana domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaDomainRoleId = new global::System.Guid(0x458da1d2, 0xbee0, 0x432f, 0x8e, 0x6d, 0xe3, 0x2c, 0xf0, 0xf5, 0xab, 0x8f);
		
		/// <summary>
		/// DomainRole Ventana
		/// Description for UPM_IPS.MPJAAMPrototool.VentanaHasBotons.Ventana
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.VentanaHasBotons/Ventana.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.VentanaHasBotons/Ventana.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Botons", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.VentanaHasBotons/Ventana.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("458da1d2-bee0-432f-8e6d-e32cf0f5ab8f")]
		public virtual Ventana Ventana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Ventana)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VentanaBoton of a Boton
		/// <summary>
		/// Gets VentanaBoton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Ventana GetVentanaBoton(Boton element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BotonDomainRoleId) as Ventana;
		}
		
		/// <summary>
		/// Sets VentanaBoton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetVentanaBoton(Boton element, Ventana newVentana)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BotonDomainRoleId, newVentana);
		}
		#endregion
		#region Boton domain role code
		
		/// <summary>
		/// Boton domain role Id.
		/// </summary>
		public static readonly global::System.Guid BotonDomainRoleId = new global::System.Guid(0x3c8bcb9c, 0x66b8, 0x4844, 0x83, 0x64, 0x46, 0xf4, 0x62, 0xd6, 0x80, 0x4e);
		
		/// <summary>
		/// DomainRole Boton
		/// Description for UPM_IPS.MPJAAMPrototool.VentanaHasBotons.Boton
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.VentanaHasBotons/Boton.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.VentanaHasBotons/Boton.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "VentanaBoton", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.VentanaHasBotons/Boton.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3c8bcb9c-66b8-4844-8364-46f462d6804e")]
		public virtual Boton Boton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Boton)DslModeling::DomainRoleInfo.GetRolePlayer(this, BotonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BotonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Botons of a Ventana
		/// <summary>
		/// Gets a list of Botons.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Boton> GetBotons(Ventana element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Boton>, Boton>(element, VentanaDomainRoleId);
		}
		#endregion
		#region Ventana link accessor
		/// <summary>
		/// Get the list of VentanaHasBotons links to a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons> GetLinksToBotons ( global::UPM_IPS.MPJAAMPrototool.Ventana ventanaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons>(ventanaInstance, global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons.VentanaDomainRoleId);
		}
		#endregion
		#region Boton link accessor
		/// <summary>
		/// Get the VentanaHasBotons link to a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons GetLinkToVentanaBoton (global::UPM_IPS.MPJAAMPrototool.Boton botonInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons>(botonInstance, global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons.BotonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Boton not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region VentanaHasBotons instance accessors
		
		/// <summary>
		/// Get any VentanaHasBotons links between a given Ventana and a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons> GetLinks( global::UPM_IPS.MPJAAMPrototool.Ventana source, global::UPM_IPS.MPJAAMPrototool.Boton target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons>();
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons>(source, global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons.VentanaDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons link in links )
			{
				if ( target.Equals(link.Boton) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one VentanaHasBotons link between a given Ventanaand a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons GetLink( global::UPM_IPS.MPJAAMPrototool.Ventana source, global::UPM_IPS.MPJAAMPrototool.Boton target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons>(source, global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons.VentanaDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.VentanaHasBotons link in links )
			{
				if ( target.Equals(link.Boton) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.MPJAAMPrototool
{
	/// <summary>
	/// DomainRelationship ItemNavegacionReferencesVentana
	/// Description for UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("09a6f54e-7f94-49d1-be9a-0bf7bc2650ca")]
	public partial class ItemNavegacionReferencesVentana : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ItemNavegacionReferencesVentana domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x09a6f54e, 0x7f94, 0x49d1, 0xbe, 0x9a, 0x0b, 0xf7, 0xbc, 0x26, 0x50, 0xca);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ItemNavegacionReferencesVentana link in the same Partition as the given ItemNavegacion
		/// </summary>
		/// <param name="source">ItemNavegacion to use as the source of the relationship.</param>
		/// <param name="target">Ventana to use as the target of the relationship.</param>
		public ItemNavegacionReferencesVentana(ItemNavegacion source, Ventana target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ItemNavegacionReferencesVentana.ItemNavegacionDomainRoleId, source), new DslModeling::RoleAssignment(ItemNavegacionReferencesVentana.VentanaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemNavegacionReferencesVentana(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemNavegacionReferencesVentana(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemNavegacionReferencesVentana(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemNavegacionReferencesVentana(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ItemNavegacion domain role code
		
		/// <summary>
		/// ItemNavegacion domain role Id.
		/// </summary>
		public static readonly global::System.Guid ItemNavegacionDomainRoleId = new global::System.Guid(0x7281afb6, 0x89f3, 0x4dbd, 0x8a, 0xd0, 0x1f, 0x2f, 0x5f, 0x0e, 0x0c, 0xe7);
		
		/// <summary>
		/// DomainRole ItemNavegacion
		/// Description for
		/// UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana.ItemNavegacion
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana/ItemNavegacion.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana/ItemNavegacion.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ventana", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana/ItemNavegacion.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7281afb6-89f3-4dbd-8ad0-1f2f5f0e0ce7")]
		public virtual ItemNavegacion ItemNavegacion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ItemNavegacion)DslModeling::DomainRoleInfo.GetRolePlayer(this, ItemNavegacionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ItemNavegacionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ItemNavegacioned of a Ventana
		/// <summary>
		/// Gets a list of ItemNavegacioned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ItemNavegacion> GetItemNavegacioned(Ventana element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ItemNavegacion>, ItemNavegacion>(element, VentanaDomainRoleId);
		}
		#endregion
		#region Ventana domain role code
		
		/// <summary>
		/// Ventana domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaDomainRoleId = new global::System.Guid(0x20a06814, 0x1ad5, 0x4bb7, 0xb4, 0x3a, 0xc5, 0x40, 0x23, 0xa4, 0x89, 0xff);
		
		/// <summary>
		/// DomainRole Ventana
		/// Description for UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana.Ventana
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana/Ventana.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana/Ventana.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ItemNavegacioned", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana/Ventana.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("20a06814-1ad5-4bb7-b43a-c54023a489ff")]
		public virtual Ventana Ventana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Ventana)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ventana of a ItemNavegacion
		/// <summary>
		/// Gets Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Ventana GetVentana(ItemNavegacion element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ItemNavegacionDomainRoleId) as Ventana;
		}
		
		/// <summary>
		/// Sets Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetVentana(ItemNavegacion element, Ventana newVentana)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ItemNavegacionDomainRoleId, newVentana);
		}
		#endregion
		#region ItemNavegacion link accessor
		/// <summary>
		/// Get the ItemNavegacionReferencesVentana link to a ItemNavegacion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana GetLinkToVentana (global::UPM_IPS.MPJAAMPrototool.ItemNavegacion itemNavegacionInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana>(itemNavegacionInstance, global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana.ItemNavegacionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ItemNavegacion not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Ventana link accessor
		/// <summary>
		/// Get the list of ItemNavegacionReferencesVentana links to a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana> GetLinksToItemNavegacioned ( global::UPM_IPS.MPJAAMPrototool.Ventana ventanaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana>(ventanaInstance, global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana.VentanaDomainRoleId);
		}
		#endregion
		#region ItemNavegacionReferencesVentana instance accessors
		
		/// <summary>
		/// Get any ItemNavegacionReferencesVentana links between a given ItemNavegacion and a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana> GetLinks( global::UPM_IPS.MPJAAMPrototool.ItemNavegacion source, global::UPM_IPS.MPJAAMPrototool.Ventana target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana>();
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana>(source, global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana.ItemNavegacionDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana link in links )
			{
				if ( target.Equals(link.Ventana) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ItemNavegacionReferencesVentana link between a given ItemNavegacionand a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana GetLink( global::UPM_IPS.MPJAAMPrototool.ItemNavegacion source, global::UPM_IPS.MPJAAMPrototool.Ventana target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana>(source, global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana.ItemNavegacionDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesVentana link in links )
			{
				if ( target.Equals(link.Ventana) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.MPJAAMPrototool
{
	/// <summary>
	/// DomainRelationship TapizPrototoolHasEstadoFin
	/// Description for UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("85997d99-8be6-4365-ad93-445b7cb6c9ef")]
	public partial class TapizPrototoolHasEstadoFin : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizPrototoolHasEstadoFin domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x85997d99, 0x8be6, 0x4365, 0xad, 0x93, 0x44, 0x5b, 0x7c, 0xb6, 0xc9, 0xef);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizPrototoolHasEstadoFin link in the same Partition as the given TapizPrototool
		/// </summary>
		/// <param name="source">TapizPrototool to use as the source of the relationship.</param>
		/// <param name="target">EstadoFin to use as the target of the relationship.</param>
		public TapizPrototoolHasEstadoFin(TapizPrototool source, EstadoFin target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizPrototoolHasEstadoFin.TapizPrototoolDomainRoleId, source), new DslModeling::RoleAssignment(TapizPrototoolHasEstadoFin.EstadoFinDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizPrototoolHasEstadoFin(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizPrototoolHasEstadoFin(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizPrototoolHasEstadoFin(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizPrototoolHasEstadoFin(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TapizPrototool domain role code
		
		/// <summary>
		/// TapizPrototool domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizPrototoolDomainRoleId = new global::System.Guid(0x2e3dde9f, 0xc4db, 0x4872, 0xa2, 0xb4, 0x25, 0x91, 0x2e, 0x43, 0xbb, 0xbe);
		
		/// <summary>
		/// DomainRole TapizPrototool
		/// Description for
		/// UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin.TapizPrototool
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin/TapizPrototool.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin/TapizPrototool.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EstadoFin", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin/TapizPrototool.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2e3dde9f-c4db-4872-a2b4-25912e43bbbe")]
		public virtual TapizPrototool TapizPrototool
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TapizPrototool)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizPrototoolDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizPrototoolDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TapizPrototool of a EstadoFin
		/// <summary>
		/// Gets TapizPrototool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TapizPrototool GetTapizPrototool(EstadoFin element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EstadoFinDomainRoleId) as TapizPrototool;
		}
		
		/// <summary>
		/// Sets TapizPrototool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapizPrototool(EstadoFin element, TapizPrototool newTapizPrototool)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EstadoFinDomainRoleId, newTapizPrototool);
		}
		#endregion
		#region EstadoFin domain role code
		
		/// <summary>
		/// EstadoFin domain role Id.
		/// </summary>
		public static readonly global::System.Guid EstadoFinDomainRoleId = new global::System.Guid(0xd0d9c04e, 0x5b38, 0x4df8, 0x9d, 0x86, 0x63, 0x90, 0xd0, 0x0f, 0xf6, 0x9b);
		
		/// <summary>
		/// DomainRole EstadoFin
		/// Description for UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin.EstadoFin
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin/EstadoFin.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin/EstadoFin.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TapizPrototool", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin/EstadoFin.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d0d9c04e-5b38-4df8-9d86-6390d00ff69b")]
		public virtual EstadoFin EstadoFin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EstadoFin)DslModeling::DomainRoleInfo.GetRolePlayer(this, EstadoFinDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EstadoFinDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EstadoFin of a TapizPrototool
		/// <summary>
		/// Gets EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EstadoFin GetEstadoFin(TapizPrototool element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TapizPrototoolDomainRoleId) as EstadoFin;
		}
		
		/// <summary>
		/// Sets EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEstadoFin(TapizPrototool element, EstadoFin newEstadoFin)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TapizPrototoolDomainRoleId, newEstadoFin);
		}
		#endregion
		#region TapizPrototool link accessor
		/// <summary>
		/// Get the TapizPrototoolHasEstadoFin link to a TapizPrototool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin GetLinkToEstadoFin (global::UPM_IPS.MPJAAMPrototool.TapizPrototool tapizPrototoolInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin>(tapizPrototoolInstance, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin.TapizPrototoolDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TapizPrototool not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EstadoFin link accessor
		/// <summary>
		/// Get the TapizPrototoolHasEstadoFin link to a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin GetLinkToTapizPrototool (global::UPM_IPS.MPJAAMPrototool.EstadoFin estadoFinInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin>(estadoFinInstance, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin.EstadoFinDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EstadoFin not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizPrototoolHasEstadoFin instance accessors
		
		/// <summary>
		/// Get any TapizPrototoolHasEstadoFin links between a given TapizPrototool and a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin> GetLinks( global::UPM_IPS.MPJAAMPrototool.TapizPrototool source, global::UPM_IPS.MPJAAMPrototool.EstadoFin target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin>();
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin>(source, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin.TapizPrototoolDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin link in links )
			{
				if ( target.Equals(link.EstadoFin) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizPrototoolHasEstadoFin link between a given TapizPrototooland a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin GetLink( global::UPM_IPS.MPJAAMPrototool.TapizPrototool source, global::UPM_IPS.MPJAAMPrototool.EstadoFin target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin>(source, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin.TapizPrototoolDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasEstadoFin link in links )
			{
				if ( target.Equals(link.EstadoFin) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.MPJAAMPrototool
{
	/// <summary>
	/// DomainRelationship ItemNavegacionReferencesEstadoFin
	/// Description for UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5c900347-5b39-4a99-876d-79030aeb2e5c")]
	public partial class ItemNavegacionReferencesEstadoFin : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ItemNavegacionReferencesEstadoFin domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5c900347, 0x5b39, 0x4a99, 0x87, 0x6d, 0x79, 0x03, 0x0a, 0xeb, 0x2e, 0x5c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ItemNavegacionReferencesEstadoFin link in the same Partition as the given ItemNavegacion
		/// </summary>
		/// <param name="source">ItemNavegacion to use as the source of the relationship.</param>
		/// <param name="target">EstadoFin to use as the target of the relationship.</param>
		public ItemNavegacionReferencesEstadoFin(ItemNavegacion source, EstadoFin target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ItemNavegacionReferencesEstadoFin.ItemNavegacionDomainRoleId, source), new DslModeling::RoleAssignment(ItemNavegacionReferencesEstadoFin.EstadoFinDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemNavegacionReferencesEstadoFin(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemNavegacionReferencesEstadoFin(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ItemNavegacionReferencesEstadoFin(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ItemNavegacionReferencesEstadoFin(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ItemNavegacion domain role code
		
		/// <summary>
		/// ItemNavegacion domain role Id.
		/// </summary>
		public static readonly global::System.Guid ItemNavegacionDomainRoleId = new global::System.Guid(0x7def55a9, 0x12c8, 0x47b6, 0x86, 0x8e, 0xe1, 0x71, 0x82, 0xb2, 0xe1, 0xdf);
		
		/// <summary>
		/// DomainRole ItemNavegacion
		/// Description for
		/// UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin.ItemNavegacion
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin/ItemNavegacion.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin/ItemNavegacion.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EstadoFin", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin/ItemNavegacion.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7def55a9-12c8-47b6-868e-e17182b2e1df")]
		public virtual ItemNavegacion ItemNavegacion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ItemNavegacion)DslModeling::DomainRoleInfo.GetRolePlayer(this, ItemNavegacionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ItemNavegacionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ItemNavegacioned of a EstadoFin
		/// <summary>
		/// Gets a list of ItemNavegacioned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ItemNavegacion> GetItemNavegacioned(EstadoFin element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ItemNavegacion>, ItemNavegacion>(element, EstadoFinDomainRoleId);
		}
		#endregion
		#region EstadoFin domain role code
		
		/// <summary>
		/// EstadoFin domain role Id.
		/// </summary>
		public static readonly global::System.Guid EstadoFinDomainRoleId = new global::System.Guid(0x3eac95ef, 0x12e5, 0x4773, 0x91, 0xa9, 0x1c, 0x5e, 0x8c, 0x1e, 0xda, 0x0e);
		
		/// <summary>
		/// DomainRole EstadoFin
		/// Description for
		/// UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin.EstadoFin
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin/EstadoFin.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin/EstadoFin.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ItemNavegacioned", PropertyDisplayNameKey="UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin/EstadoFin.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3eac95ef-12e5-4773-91a9-1c5e8c1eda0e")]
		public virtual EstadoFin EstadoFin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EstadoFin)DslModeling::DomainRoleInfo.GetRolePlayer(this, EstadoFinDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EstadoFinDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EstadoFin of a ItemNavegacion
		/// <summary>
		/// Gets EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EstadoFin GetEstadoFin(ItemNavegacion element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ItemNavegacionDomainRoleId) as EstadoFin;
		}
		
		/// <summary>
		/// Sets EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEstadoFin(ItemNavegacion element, EstadoFin newEstadoFin)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ItemNavegacionDomainRoleId, newEstadoFin);
		}
		#endregion
		#region ItemNavegacion link accessor
		/// <summary>
		/// Get the ItemNavegacionReferencesEstadoFin link to a ItemNavegacion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin GetLinkToEstadoFin (global::UPM_IPS.MPJAAMPrototool.ItemNavegacion itemNavegacionInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin>(itemNavegacionInstance, global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin.ItemNavegacionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ItemNavegacion not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EstadoFin link accessor
		/// <summary>
		/// Get the list of ItemNavegacionReferencesEstadoFin links to a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin> GetLinksToItemNavegacioned ( global::UPM_IPS.MPJAAMPrototool.EstadoFin estadoFinInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin>(estadoFinInstance, global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin.EstadoFinDomainRoleId);
		}
		#endregion
		#region ItemNavegacionReferencesEstadoFin instance accessors
		
		/// <summary>
		/// Get any ItemNavegacionReferencesEstadoFin links between a given ItemNavegacion and a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin> GetLinks( global::UPM_IPS.MPJAAMPrototool.ItemNavegacion source, global::UPM_IPS.MPJAAMPrototool.EstadoFin target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin>();
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin>(source, global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin.ItemNavegacionDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin link in links )
			{
				if ( target.Equals(link.EstadoFin) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ItemNavegacionReferencesEstadoFin link between a given ItemNavegacionand a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin GetLink( global::UPM_IPS.MPJAAMPrototool.ItemNavegacion source, global::UPM_IPS.MPJAAMPrototool.EstadoFin target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin>(source, global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin.ItemNavegacionDomainRoleId);
			foreach ( global::UPM_IPS.MPJAAMPrototool.ItemNavegacionReferencesEstadoFin link in links )
			{
				if ( target.Equals(link.EstadoFin) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
