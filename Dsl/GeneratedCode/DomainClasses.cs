//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace UPM_IPS.MPJAAMPrototool
{
	/// <summary>
	/// DomainClass TapizPrototool
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.TapizPrototool.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.TapizPrototool.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7715216c-dff0-4b15-813b-df20ee115cd1")]
	public partial class TapizPrototool : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TapizPrototool domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7715216c, 0xdff0, 0x4b15, 0x81, 0x3b, 0xdf, 0x20, 0xee, 0x11, 0x5c, 0xd1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TapizPrototool(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TapizPrototool(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region nombreAplicacion domain property code
		
		/// <summary>
		/// nombreAplicacion domain property Id.
		/// </summary>
		public static readonly global::System.Guid nombreAplicacionDomainPropertyId = new global::System.Guid(0x65d1f014, 0x86c3, 0x432f, 0xbc, 0x9d, 0x9b, 0x82, 0x3e, 0x9a, 0xf1, 0x6b);
		
		/// <summary>
		/// Storage for nombreAplicacion
		/// </summary>
		private global::System.String nombreAplicacionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of nombreAplicacion domain property.
		/// Description for UPM_IPS.MPJAAMPrototool.TapizPrototool.Nombre Aplicacion
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.TapizPrototool/nombreAplicacion.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.TapizPrototool/nombreAplicacion.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("65d1f014-86c3-432f-bc9d-9b823e9af16b")]
		public global::System.String nombreAplicacion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombreAplicacionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				nombreAplicacionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TapizPrototool.nombreAplicacion domain property.
		/// </summary>
		internal sealed partial class nombreAplicacionPropertyHandler : DslModeling::DomainPropertyValueHandler<TapizPrototool, global::System.String>
		{
			private nombreAplicacionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TapizPrototool.nombreAplicacion domain property value handler.
			/// </summary>
			public static readonly nombreAplicacionPropertyHandler Instance = new nombreAplicacionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TapizPrototool.nombreAplicacion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return nombreAplicacionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TapizPrototool element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombreAplicacionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TapizPrototool element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombreAplicacionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Ventanas opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Ventanas.
		/// Description for UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanas.TapizPrototool
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Ventana> Ventanas
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Ventana>, Ventana>(global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanas.TapizPrototoolDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.MPJAAMPrototool.Ventana.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::UPM_IPS.MPJAAMPrototool.Ventana sourceVentana1 = sourceElement as global::UPM_IPS.MPJAAMPrototool.Ventana;
			if (sourceVentana1 != null)
			{
				// Create link for path TapizPrototoolHasVentanas.Ventanas
				this.Ventanas.Add(sourceVentana1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::UPM_IPS.MPJAAMPrototool.Ventana sourceVentana1 = sourceElement as global::UPM_IPS.MPJAAMPrototool.Ventana;
			if (sourceVentana1 != null)
			{
				// Delete link for path TapizPrototoolHasVentanas.Ventanas
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanas.GetLinks((global::UPM_IPS.MPJAAMPrototool.TapizPrototool)this, sourceVentana1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanas.TapizPrototoolDomainRoleId, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanas.VentanaDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace UPM_IPS.MPJAAMPrototool
{
	/// <summary>
	/// DomainClass Ventana
	/// Description for UPM_IPS.MPJAAMPrototool.Ventana
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.Ventana.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.Ventana.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("163f86dd-d69b-4142-abb2-ee5c55283e68")]
	public abstract partial class Ventana : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Ventana domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x163f86dd, 0xd69b, 0x4142, 0xab, 0xb2, 0xee, 0x5c, 0x55, 0x28, 0x3e, 0x68);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Ventana(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region nombre domain property code
		
		/// <summary>
		/// nombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid nombreDomainPropertyId = new global::System.Guid(0x83765669, 0x91dd, 0x4f0c, 0x83, 0xcd, 0x5a, 0xfa, 0x2a, 0x03, 0xea, 0x8b);
		
		/// <summary>
		/// Storage for nombre
		/// </summary>
		private global::System.String nombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of nombre domain property.
		/// Description for UPM_IPS.MPJAAMPrototool.Ventana.Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.Ventana/nombre.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.Ventana/nombre.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("83765669-91dd-4f0c-83cd-5afa2a03ea8b")]
		public global::System.String nombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				nombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Ventana.nombre domain property.
		/// </summary>
		internal sealed partial class nombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Ventana, global::System.String>
		{
			private nombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Ventana.nombre domain property value handler.
			/// </summary>
			public static readonly nombrePropertyHandler Instance = new nombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Ventana.nombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return nombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Ventana element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Ventana element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ancho domain property code
		
		/// <summary>
		/// ancho domain property Id.
		/// </summary>
		public static readonly global::System.Guid anchoDomainPropertyId = new global::System.Guid(0xcb743062, 0x552e, 0x4275, 0xb2, 0x01, 0xa1, 0xb8, 0xe6, 0x7d, 0x23, 0xcf);
		
		/// <summary>
		/// Storage for ancho
		/// </summary>
		private global::System.String anchoPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ancho domain property.
		/// Description for UPM_IPS.MPJAAMPrototool.Ventana.Ancho
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.Ventana/ancho.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.Ventana/ancho.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cb743062-552e-4275-b201-a1b8e67d23cf")]
		public global::System.String ancho
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return anchoPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				anchoPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Ventana.ancho domain property.
		/// </summary>
		internal sealed partial class anchoPropertyHandler : DslModeling::DomainPropertyValueHandler<Ventana, global::System.String>
		{
			private anchoPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Ventana.ancho domain property value handler.
			/// </summary>
			public static readonly anchoPropertyHandler Instance = new anchoPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Ventana.ancho domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return anchoDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Ventana element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.anchoPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Ventana element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.anchoPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region altura domain property code
		
		/// <summary>
		/// altura domain property Id.
		/// </summary>
		public static readonly global::System.Guid alturaDomainPropertyId = new global::System.Guid(0xa60bc0ed, 0x9f48, 0x444b, 0xba, 0x80, 0x7f, 0xdb, 0x90, 0x22, 0xbe, 0x09);
		
		/// <summary>
		/// Storage for altura
		/// </summary>
		private global::System.String alturaPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of altura domain property.
		/// Description for UPM_IPS.MPJAAMPrototool.Ventana.Altura
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.Ventana/altura.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.Ventana/altura.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a60bc0ed-9f48-444b-ba80-7fdb9022be09")]
		public global::System.String altura
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return alturaPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				alturaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Ventana.altura domain property.
		/// </summary>
		internal sealed partial class alturaPropertyHandler : DslModeling::DomainPropertyValueHandler<Ventana, global::System.String>
		{
			private alturaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Ventana.altura domain property value handler.
			/// </summary>
			public static readonly alturaPropertyHandler Instance = new alturaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Ventana.altura domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return alturaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Ventana element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.alturaPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Ventana element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.alturaPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TapizPrototool opposite domain role accessor
		/// <summary>
		/// Gets or sets TapizPrototool.
		/// Description for UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanas.Ventana
		/// </summary>
		public virtual TapizPrototool TapizPrototool
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanas.VentanaDomainRoleId) as TapizPrototool;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.MPJAAMPrototool.TapizPrototoolHasVentanas.VentanaDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.MPJAAMPrototool
{
	/// <summary>
	/// DomainClass VentanaPrincipal
	/// Description for UPM_IPS.MPJAAMPrototool.VentanaPrincipal
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.VentanaPrincipal.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.VentanaPrincipal.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("90e96a9e-4ba2-4b8c-87bc-69070af1dee8")]
	public partial class VentanaPrincipal : Ventana
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// VentanaPrincipal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x90e96a9e, 0x4ba2, 0x4b8c, 0x87, 0xbc, 0x69, 0x07, 0x0a, 0xf1, 0xde, 0xe8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VentanaPrincipal(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VentanaPrincipal(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region VentanaSecundarium opposite domain role accessor
		
		/// <summary>
		/// Gets a list of VentanaSecundarium.
		/// Description for
		/// UPM_IPS.MPJAAMPrototool.VPrincipalReferencesVSecundaria.VentanaPrincipal
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<VentanaSecundaria> VentanaSecundarium
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<VentanaSecundaria>, VentanaSecundaria>(global::UPM_IPS.MPJAAMPrototool.VPrincipalReferencesVSecundaria.VentanaPrincipalDomainRoleId);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.MPJAAMPrototool
{
	/// <summary>
	/// DomainClass VentanaSecundaria
	/// Description for UPM_IPS.MPJAAMPrototool.VentanaSecundaria
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.VentanaSecundaria.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.VentanaSecundaria.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8dd90412-52e1-415b-94d5-d7db3ef18623")]
	public partial class VentanaSecundaria : Ventana
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// VentanaSecundaria domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8dd90412, 0x52e1, 0x415b, 0x94, 0xd5, 0xd7, 0xdb, 0x3e, 0xf1, 0x86, 0x23);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VentanaSecundaria(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VentanaSecundaria(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region modal domain property code
		
		/// <summary>
		/// modal domain property Id.
		/// </summary>
		public static readonly global::System.Guid modalDomainPropertyId = new global::System.Guid(0x7fc1921b, 0xe289, 0x4f2b, 0x9b, 0xa0, 0xc2, 0xe1, 0xb8, 0x2d, 0x0f, 0x71);
		
		/// <summary>
		/// Storage for modal
		/// </summary>
		private global::System.Boolean modalPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of modal domain property.
		/// Description for UPM_IPS.MPJAAMPrototool.VentanaSecundaria.Modal
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.MPJAAMPrototool.VentanaSecundaria/modal.DisplayName", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.MPJAAMPrototool.VentanaSecundaria/modal.Description", typeof(global::UPM_IPS.MPJAAMPrototool.MPJAAMPrototoolDomainModel), "UPM_IPS.MPJAAMPrototool.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7fc1921b-e289-4f2b-9ba0-c2e1b82d0f71")]
		public global::System.Boolean modal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modalPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				modalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the VentanaSecundaria.modal domain property.
		/// </summary>
		internal sealed partial class modalPropertyHandler : DslModeling::DomainPropertyValueHandler<VentanaSecundaria, global::System.Boolean>
		{
			private modalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the VentanaSecundaria.modal domain property value handler.
			/// </summary>
			public static readonly modalPropertyHandler Instance = new modalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the VentanaSecundaria.modal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return modalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(VentanaSecundaria element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modalPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(VentanaSecundaria element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modalPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region VentanaPrincipal opposite domain role accessor
		/// <summary>
		/// Gets or sets VentanaPrincipal.
		/// Description for
		/// UPM_IPS.MPJAAMPrototool.VPrincipalReferencesVSecundaria.VentanaSecundaria
		/// </summary>
		public virtual VentanaPrincipal VentanaPrincipal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.MPJAAMPrototool.VPrincipalReferencesVSecundaria.VentanaSecundariaDomainRoleId) as VentanaPrincipal;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.MPJAAMPrototool.VPrincipalReferencesVSecundaria.VentanaSecundariaDomainRoleId, value);
			}
		}
		#endregion
		#region TargetVentanaSecundarium opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetVentanaSecundarium.
		/// Description for
		/// UPM_IPS.MPJAAMPrototool.VSecundariaReferencesVSecundaria.SourceVentanaSecundaria
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<VentanaSecundaria> TargetVentanaSecundarium
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<VentanaSecundaria>, VentanaSecundaria>(global::UPM_IPS.MPJAAMPrototool.VSecundariaReferencesVSecundaria.SourceVentanaSecundariaDomainRoleId);
			}
		}
		#endregion
		#region SourceVentanaSecundarium opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceVentanaSecundarium.
		/// Description for
		/// UPM_IPS.MPJAAMPrototool.VSecundariaReferencesVSecundaria.TargetVentanaSecundaria
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<VentanaSecundaria> SourceVentanaSecundarium
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<VentanaSecundaria>, VentanaSecundaria>(global::UPM_IPS.MPJAAMPrototool.VSecundariaReferencesVSecundaria.TargetVentanaSecundariaDomainRoleId);
			}
		}
		#endregion
	}
}
